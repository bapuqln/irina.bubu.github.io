<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ACE_xW</title>
  
  <subtitle>一个程序员</subtitle>
  <link href="https://bapuqln.github.io/atom.xml" rel="self"/>
  
  <link href="https://bapuqln.github.io/"/>
  <updated>2025-01-15T07:01:21.143Z</updated>
  <id>https://bapuqln.github.io/</id>
  
  <author>
    <name>shouyi.www</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VIPER架构落地IM</title>
    <link href="https://bapuqln.github.io/2025/01/15/VIPER%E6%9E%B6%E6%9E%84%E8%90%BD%E5%9C%B0%E5%88%B0IM/"/>
    <id>https://bapuqln.github.io/2025/01/15/VIPER%E6%9E%B6%E6%9E%84%E8%90%BD%E5%9C%B0%E5%88%B0IM/</id>
    <published>2025-01-15T07:01:21.143Z</published>
    <updated>2025-01-15T07:01:21.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="问题由来">问题由来</h2><p>来新公司也大半年了，发现之前的工程实现的非常不合理，维护成本极高，内部吐槽严重，<code>BUG</code>叠 <code>BUG</code>，修老 <code>BUG</code> 引入的新 <code>BUG</code>层出不穷，质量堪忧。</p><h2 id="pros-cons">Pros &amp; Cons</h2><p>拿到代码后简单的看了一下:</p><ul><li>使用 <code>MVC</code>模式，并且由于<code>各种原因</code>，说白了就是写的挫。将<code>MCV(Model-View-Controller)</code> 写成了<code>MVC(Massive View Controller)</code></li><li><code>View Controller</code>写的极为笨重，几乎流程都写在几个比较大的 <code>View Controller</code>中。牵一发而动全身，能不出错么。</li><li>目前的时机比较不错，新项目要开始了，及得想办法复用之前的逻辑，又得写的没什么问题。</li><li>很久不写这种流程了，还是需要仔细的回归练习一下，而且还能练练swift，何乐而不为呢</li></ul><h2 id="viper-结构简介">VIPER 结构简介</h2><p><code>VIPER</code> 是视图 (<code>View</code>)，交互器(<code>Interactor</code>)，展示器 (<code>Presenter</code>)，实体(<code>Entity</code>) 以及路由 (<code>Routing</code>)的首字母缩写。这样根据逻辑结构的不同可以划分为不同的责任层。使得依赖更容易隔离，比如说数据库，也更容易单独测试，边界清晰。他们的关系大概是这样的 如下图所示：</p><figure><img src="/images/viper_arch.png" alt="VIPER" /><figcaption aria-hidden="true">VIPER</figcaption></figure><h2 id="为什么要用-viper">为什么要用 VIPER</h2><p>互联网企业都要求快速迭代，要求周期短，质量高。如何快速的在满足需求的前提下下交付质量好的产品，是大家都想解决的问题。对于一个处于一线的程序员来讲，从根上推动整个流程的变化是不切实际的。比较稳妥且的办法是采用技术手段来提高自己的效率，降低出错的概率。对于源源不断的需求，以及不断的需求变化。除了默默的问候这些PM，不还是得一个字一个字的敲出来。做的不好，大家会怀疑你的能力。面子上挂不住。活那么多，身体抗不住，身为一个快乐的程序员，在减少秃头的情况下得想办法让自己轻松点嘛。</p><h3 id="步入正题">步入正题</h3><ul><li>VIPER的好处就是模块之前关系比较松散，模块划分清晰，几乎做到了彻底解耦。每个（VIPER）子模块都可以单独的测试，</li><li>避免掉了 MVC -&gt; M(assive)VC 的情况，VC里面几乎就是个接口调用，几乎就是完成业务流程的胶水代码，而且都是Protocol 的接口，业务比较清晰。</li><li>数据模型的处理，单独的放到了 Interactor内部，这一块对于其他模块几乎是透明。</li><li>VC 彻底细化为View 和 Presenter，三者的交互可以参考 MVP模式，不多说。</li><li>Router 作为业务的入口和跳转的枢纽，将跳转逻辑也吃掉了。</li><li>最终 VIPER化之后，代码量会变多、文件会变多，逻辑变得清晰可维护。</li><li>不同的 VIPER 模块 通信只有两个途径，一个是通过 ROUTER，另一个是通过INTERACTOR</li></ul><h3 id="开始落地">开始落地</h3><h4 id="设计图">设计图</h4><ul><li><p><ahref="https://github.com/bapuqln/XCode-Template-Viper-Mac">VIPER模板</a> 每次手工新建五个文件着实比较蛋疼，那么使用 XCode模板每次自动新建不是很爽。链接就是新建好的模板。方便省事，目前只有 Mac版本，改吧改吧 iOS 版本也不是啥难事</p></li><li><p>以聊天页为例 VIPER 落地 <img src="/images/chat-view.svg"alt="设计图" /></p></li></ul><ol type="1"><li>从图中可以看到该页面比较简单，聊天页面大概分两个部分，左边应该是thread 列表，右边是 消息流。</li><li>窗体的样式几乎都是自定义的。</li><li>顶部存在多 TAB，方便切换不同的显示内容。</li><li>由于是 IM，那就存在登陆和非登陆，因此需要目前两个 VIPER 模块。</li><li>从设计来看，各种 UI 组件都需要自定义，因此需要提供一个 UI基础组件库，给工程提供子弹。吃掉 UI的内部细节。只要对外提供行为即可。</li></ol><h4 id="登陆-viper-结构">登陆 VIPER 结构</h4><ul><li><p>登陆需要简单的输入用户名和密码，然后呢对于登陆成功的状况，会有账户维护和消息同步。</p></li><li><p>设计有要求在登录页内部玩各种花活。因此目前沟通后，登录页划分为登陆输入页，和登陆行为页，两个页面的逻辑和流程不大一样。</p></li><li><p>登陆输入页的协议定义如下</p></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Wireframe - 这块 Wireframe 就是 ROUTER</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZLoginMainWireframeProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MARK: Presenter -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZLoginMainViewPresenterProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="comment">// 目前只有注册的行为，因此定义好接口供 VC 使用</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">startRegistration</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: Interactor -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZLoginMainInteractorProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> presenter: <span class="type">AZLoginMainViewPresenterProtocol</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="comment">//给 PRESENTER 提供的接口，真正的注册行为是在 INTERACTOR 中发生的</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">startRegistration</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: View -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZLoginMainViewProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> presenter: <span class="type">AZLoginMainViewPresenterProtocol</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><img src="/images/login-viper.png" alt="登陆页" /><figcaption aria-hidden="true">登陆页</figcaption></figure><ul><li>登陆行为页</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Wireframe -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZLoginActionWireframeProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="comment">//根据业务需要，这块有可能需要直接的显示到主界面</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">showMainWindow</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MARK: Presenter -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZLoginActionPresenterProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="comment">// 给 VC 提供的接口可以注册和忘记密码，并且在登陆成功后可以有接口给 INTERACTOR 调用(finish)</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">login</span>(<span class="params">email</span>: <span class="type">String</span>?, <span class="params">password</span>: <span class="type">String</span>?)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">finished</span>(<span class="params">login</span> <span class="params">error</span>: <span class="type">AZError</span>?)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">forgetPassword</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: Interactor -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZLoginActionInteractorProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> presenter: <span class="type">AZLoginActionPresenterProtocol</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="comment">// 真正的接口，具体的行为是在 INTERACTOR 中发生的，</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">login</span>(<span class="params">email</span>: <span class="type">String</span>?, <span class="params">password</span>: <span class="type">String</span>?)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">forgetPassword</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: View -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZLoginActionViewProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> presenter: <span class="type">AZLoginActionPresenterProtocol</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="comment">// 更新 View 的接口</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">loginError</span>(<span class="keyword">_</span> <span class="params">error</span>: <span class="type">AZError</span>)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">closeWindow</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个简单的功能，写了这么多是不是很蛋疼，明明只需要一个 VC就可以搞定的事情，非得这么麻烦么？</p></blockquote><p>其实在真正实现之后，发现除了文件多点以为，登陆的逻辑和流程非常清晰，真正地做到了代码自解释，不同结构之间通过接口来实现交互。将与其他模块无关的功能对外隐藏,而且真正的收益是在整个工程的逻辑和功能变得越来越复杂之后才体现出来。</p><h4 id="聊天-viper">聊天 VIPER</h4><p>登陆成功后，界面会由登陆 VIPER 模块路由到主界面VIPER，如下图，那么界面就可以正常的切换过来了</p><figure><img src="/images/router-viper.png" alt="路由切换" /><figcaption aria-hidden="true">路由切换</figcaption></figure><ul><li>搭建几个重要 VIPER 子结构 通过分析具体的业务流程和要完成的功能不断地补充接口，篇幅问题，省略掉大部分细节，以切换 tab 为例。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Wireframe -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZMainWindowWireframeProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MARK: Presenter -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZMainWindowPresenterProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> router: <span class="type">AZMainWindowWireframeProtocol</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">switchMainWindowTabContent</span>(<span class="keyword">_</span> <span class="params">userInfo</span>: [<span class="params">AnyHashable</span>: <span class="keyword">Any</span>])</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: Interactor -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZMainWindowInteractorProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> presenter: <span class="type">AZMainWindowPresenterProtocol</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">swithMainWindowTab</span>(<span class="keyword">_</span> <span class="params">tab</span>: <span class="type">AZTitlebarTag</span>)</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: View -</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">AZMainWindowViewProtocol</span>: <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> presenter: <span class="type">AZMainWindowPresenterProtocol</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">switchMainWindowTabContent</span>(<span class="keyword">_</span> <span class="params">userInfo</span>: [<span class="params">AnyHashable</span>: <span class="keyword">Any</span>])</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随着功能的逐渐叠加，VIPER中不同的子结构的代码增加都很平稳，不会出现某一个模块代码量指数级的增加。从前任写完的第一个版本的 bug 叠bug，到这个版本的内部备受好评，其实基础功能都一致，只不过是界面看上去有着巨大的差别。但是从结果来看维护成本和收益都很不错，但实际上改变的是整个项目的基础结构，开发流程，并且带动了大家往着更合理的方向前进。从这个过程中，内部总结出了，代码规范，提交规范，开发规范，这么看来，每个人都应该有着不少的收获.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;问题由来&quot;&gt;问题由来&lt;/h2&gt;
&lt;p&gt;来新公司也大半年了，发现之前</summary>
      
    
    
    
    <category term="Mac Develop" scheme="https://bapuqln.github.io/categories/Mac-Develop/"/>
    
    
    <category term="Mac Develop" scheme="https://bapuqln.github.io/tags/Mac-Develop/"/>
    
  </entry>
  
  <entry>
    <title>PermMissingElement</title>
    <link href="https://bapuqln.github.io/2025/01/15/PermMissingElement/"/>
    <id>https://bapuqln.github.io/2025/01/15/PermMissingElement/</id>
    <published>2025-01-15T07:01:21.142Z</published>
    <updated>2025-01-15T07:01:21.142Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/trainingQ23U3S-QHV/">PermMissingElement</a>An array A consisting of N different integers is given. The arraycontains integers in the range [1..(N + 1)], which means that exactlyone element is missing.</p><p>Your goal is to find that missing element.</p><p>Write a function:</p><p>int solution(vector<int> &amp;A);</p><p>that, given an array A, returns the value of the missing element.</p><p>For example, given array A such that:</p><p>A[0] = 2 A[1] = 3 A[2] = 1 A[3] = 5 the function should return 4, asit is the missing element.</p><p>Write an efficient algorithm for the following assumptions:</p><p>N is an integer within the range [0..100,000]; the elements of A areall distinct; each element of array A is an integer within the range[1..(N + 1)].</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>需要求一个无序数组中唯一的缺失元素</li><li>类似于每个元素都出现两次，只有一个元素只出现一次的题目</li><li>缺失的元素让它只出现一次即可</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = A.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        ans = (ans ^ A[i] ^ (i<span class="number">+1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/trainingQ23U3S-QHV/&quot;&gt;PermMissingElement&lt;/a&gt;
An array A consisting of N different integers is given. The array
contains integers in the range [1..(N + 1)], which means that exactly
one element is missing.&lt;/p&gt;
&lt;p&gt;Your goal is to find that missing element.&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;int solution(vector&lt;int&gt; &amp;amp;A);&lt;/p&gt;
&lt;p&gt;that, given an array A, returns the value of the missing element.&lt;/p&gt;
&lt;p&gt;For example, given array A such that:&lt;/p&gt;
&lt;p&gt;A[0] = 2 A[1] = 3 A[2] = 1 A[3] = 5 the function should return 4, as
it is the missing element.&lt;/p&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;N is an integer within the range [0..100,000]; the elements of A are
all distinct; each element of array A is an integer within the range
[1..(N + 1)].&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>FrogJump</title>
    <link href="https://bapuqln.github.io/2025/01/15/FrogJump/"/>
    <id>https://bapuqln.github.io/2025/01/15/FrogJump/</id>
    <published>2025-01-15T07:01:21.139Z</published>
    <updated>2025-01-15T07:01:21.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/training5TVBTN-APV/">FrogJump</a>A small frog wants to get to the other side of the road. The frog iscurrently located at position X and wants to get to a position greaterthan or equal to Y. The small frog always jumps a fixed distance, D.</p><p>Count the minimal number of jumps that the small frog must perform toreach its target.</p><p>Write a function:</p><p>int solution(int X, int Y, int D);</p><p>that, given three integers X, Y and D, returns the minimal number ofjumps from position X to a position equal to or greater than Y.</p><p>For example, given:</p><p>X = 10 Y = 85 D = 30 the function should return 3, because the frogwill be positioned as follows:</p><p>after the first jump, at position 10 + 30 = 40 after the second jump,at position 10 + 30 + 30 = 70 after the third jump, at position 10 + 30+ 30 + 30 = 100 Write an efficient algorithm for the followingassumptions:</p><p>X, Y and D are integers within the range [1..1,000,000,000]; X ≤Y.</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>这到底是主要是考察数据长度，需要将数据提升精度才能得出正确结果</li><li>ceil 向上取整</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// ceil在图文件 cmath 中</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> X, <span class="type">int</span> Y, <span class="type">int</span> D)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">double</span> ans = (<span class="built_in">double</span>(Y) - <span class="built_in">double</span>(X)) / <span class="built_in">double</span>(D);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ceil</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/training5TVBTN-APV/&quot;&gt;FrogJump&lt;/a&gt;
A small frog wants to get to the other side of the road. The frog is
currently located at position X and wants to get to a position greater
than or equal to Y. The small frog always jumps a fixed distance, D.&lt;/p&gt;
&lt;p&gt;Count the minimal number of jumps that the small frog must perform to
reach its target.&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;int solution(int X, int Y, int D);&lt;/p&gt;
&lt;p&gt;that, given three integers X, Y and D, returns the minimal number of
jumps from position X to a position equal to or greater than Y.&lt;/p&gt;
&lt;p&gt;For example, given:&lt;/p&gt;
&lt;p&gt;X = 10 Y = 85 D = 30 the function should return 3, because the frog
will be positioned as follows:&lt;/p&gt;
&lt;p&gt;after the first jump, at position 10 + 30 = 40 after the second jump,
at position 10 + 30 + 30 = 70 after the third jump, at position 10 + 30
+ 30 + 30 = 100 Write an efficient algorithm for the following
assumptions:&lt;/p&gt;
&lt;p&gt;X, Y and D are integers within the range [1..1,000,000,000]; X ≤
Y.&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>BinaryGap</title>
    <link href="https://bapuqln.github.io/2025/01/15/BinaryGap/"/>
    <id>https://bapuqln.github.io/2025/01/15/BinaryGap/</id>
    <published>2025-01-15T07:01:21.138Z</published>
    <updated>2025-01-15T07:01:21.138Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/trainingUFUBUW-TAQ/">BinaryGap</a>A binary gap within a positive integer N is any maximal sequence ofconsecutive zeros that is surrounded by ones at both ends in the binaryrepresentation of N.</p><p>For example, number 9 has binary representation 1001 and contains abinary gap of length 2. The number 529 has binary representation1000010001 and contains two binary gaps: one of length 4 and one oflength 3. The number 20 has binary representation 10100 and contains onebinary gap of length 1. The number 15 has binary representation 1111 andhas no binary gaps. The number 32 has binary representation 100000 andhas no binary gaps.</p><p>Write a function:</p><p>int solution(int N);</p><p>that, given a positive integer N, returns the length of its longestbinary gap. The function should return 0 if N doesn't contain a binarygap.</p><p>For example, given N = 1041 the function should return 5, because Nhas binary representation 10000010001 and so its longest binary gap isof length 5. Given N = 32 the function should return 0, because N hasbinary representation '100000' and thus no binary gaps.</p><p>Write an efficient algorithm for the following assumptions:</p><p>N is an integer within the range [1..2,147,483,647]. Copyright2009–2020 by Codility Limited. All Rights Reserved. Unauthorizedcopying, publication or disclosure prohibited.</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>给定十进制数字，求最大的二进制的 <code>gap</code>。</li><li><code>gap</code> 必须是在两个 1 之间</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (N) &#123;</span><br><span class="line">        <span class="keyword">while</span> (N &amp;&amp; (N &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            N &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (N &amp;&amp; !(N &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            N &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (found)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, count);</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/trainingUFUBUW-TAQ/&quot;&gt;BinaryGap&lt;/a&gt;
A binary gap within a positive integer N is any maximal sequence of
consecutive zeros that is surrounded by ones at both ends in the binary
representation of N.&lt;/p&gt;
&lt;p&gt;For example, number 9 has binary representation 1001 and contains a
binary gap of length 2. The number 529 has binary representation
1000010001 and contains two binary gaps: one of length 4 and one of
length 3. The number 20 has binary representation 10100 and contains one
binary gap of length 1. The number 15 has binary representation 1111 and
has no binary gaps. The number 32 has binary representation 100000 and
has no binary gaps.&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;int solution(int N);&lt;/p&gt;
&lt;p&gt;that, given a positive integer N, returns the length of its longest
binary gap. The function should return 0 if N doesn&#39;t contain a binary
gap.&lt;/p&gt;
&lt;p&gt;For example, given N = 1041 the function should return 5, because N
has binary representation 10000010001 and so its longest binary gap is
of length 5. Given N = 32 the function should return 0, because N has
binary representation &#39;100000&#39; and thus no binary gaps.&lt;/p&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;N is an integer within the range [1..2,147,483,647]. Copyright
2009–2020 by Codility Limited. All Rights Reserved. Unauthorized
copying, publication or disclosure prohibited.&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>Groking The coding Interview</title>
    <link href="https://bapuqln.github.io/2020/11/16/GrokingTheCodeInterview/"/>
    <id>https://bapuqln.github.io/2020/11/16/GrokingTheCodeInterview/</id>
    <published>2020-11-16T02:33:32.000Z</published>
    <updated>2025-01-15T07:01:21.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="滑动窗口">滑动窗口</h2><p><ahref="https://leetcode.com/problems/add-two-numbers/">AddTwoNumbers</a>You are given two non-empty linked lists representing two non-negativeintegers. The digits are stored in reverse order and each of their nodescontain a single digit. Add the two numbers and return it as a linkedlist.</p><p>You may assume the two numbers do not contain any leading zero,except the number 0 itself.</p><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li><code>2</code> 个 <code>非空</code>链表，长度可能不相等</li><li>每个链表为<code>逆序</code></li><li>返回两个链表的和</li><li>每个元素应该为正数</li></ul><h3 id="理解例子">理解例子</h3><ul><li><code>2 -&gt; 4 -&gt; 3</code> = <code>342</code></li><li><code>5 -&gt; 6 -&gt; 4</code> = <code>465</code></li><li><code>342 + 465 = 807</code></li><li>答案 : <code>7 -&gt; 0 -&gt; 8</code></li></ul><h3 id="思路">思路</h3><ul><li>将每一个链表变成整形，然后相加，结果分解成链表不大合适，还得处理越界的情况</li><li>比较合理的办法：是一边遍历一边生成链表</li><li>每一个生成的节点为两个数的和，有可能产生进位: 如<code>7+8=15</code></li><li>一个节点的结果为：<code>sum = 前一个节点的进位+两个节点的和</code>，<code>res = sum % 10</code>;</li><li>一个节点的结果几种情况<ul><li><code>last_carry + left + right &lt; 10</code></li><li><code>last_carry + left + right &gt;= 10</code></li><li><code>只要有进位，就一定会有一个新的节点出现</code></li></ul></li></ul><h3 id="代码">代码</h3><h4 id="非递归">非递归</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!l1) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (!l2) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode *head = &amp;dummy;</span><br><span class="line">        <span class="keyword">while</span> (l1 || l2 || carry) &#123;</span><br><span class="line">            <span class="type">int</span> sum = (l1 ? l1-&gt;val : <span class="number">0</span>) + (l2 ? l2-&gt;val : <span class="number">0</span>) + carry;</span><br><span class="line">            head-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span> (sum % <span class="number">10</span>);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l1) l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (l2) l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">ListNode</span>?</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">val</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">     <span class="keyword">self</span>.val <span class="operator">=</span> val</span><br><span class="line">     <span class="keyword">self</span>.next <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">addTwoNumbers</span>(<span class="keyword">_</span> <span class="params">l1</span>: <span class="type">ListNode</span>?, <span class="keyword">_</span> <span class="params">l2</span>: <span class="type">ListNode</span>?) -&gt; <span class="type">ListNode</span>? &#123;</span><br><span class="line">    <span class="keyword">var</span> l1 <span class="operator">=</span> l1</span><br><span class="line">        <span class="keyword">var</span> l2 <span class="operator">=</span> l2</span><br><span class="line">        <span class="keyword">var</span> prev <span class="operator">=</span> <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> carry <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> head <span class="operator">=</span> prev</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">||</span> l2 <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">||</span> carry <span class="operator">!=</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> cur <span class="operator">=</span> <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">let</span> sum <span class="operator">=</span> (l2 <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">?</span> <span class="number">0</span> : l2<span class="operator">!</span>.val) <span class="operator">+</span> (l1 <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">?</span> <span class="number">0</span> : l1<span class="operator">!</span>.val) <span class="operator">+</span> carry</span><br><span class="line">            cur.val <span class="operator">=</span> sum <span class="operator">%</span> <span class="number">10</span></span><br><span class="line">            carry <span class="operator">=</span> sum <span class="operator">/</span> <span class="number">10</span></span><br><span class="line">            prev.next <span class="operator">=</span> cur</span><br><span class="line">            prev <span class="operator">=</span> cur</span><br><span class="line">            l1 <span class="operator">=</span> l1 <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">?</span> l1: l1<span class="operator">?</span>.next</span><br><span class="line">            l2 <span class="operator">=</span> l2 <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">?</span> l2: l2<span class="operator">?</span>.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归">递归</h4><p>这道题比较简单，递归模式也比较好想到加法需要三个值，两个操作符（来自两个链表）以及一个进位标记。因此递归模式为：</p><ul><li>递归出口：两个链表都已经到达末尾，并且没有进位</li><li>递归实现：<ul><li>当前节点的结果为：和/10</li><li>当前节点的next节点为：对于两个链表next节点的计算的结果</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2, <span class="type">int</span> carry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!l1 &amp;&amp; !l2 &amp;&amp; !carry) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> sum = (l1?l1-&gt;val:<span class="number">0</span>) + (l2?l2-&gt;val:<span class="number">0</span>) + carry;</span><br><span class="line">        ListNode *ans = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">        ans-&gt;next = <span class="built_in">addTwoNumbers</span>(l1?l1-&gt;next:<span class="literal">nullptr</span>, l2?l2-&gt;next:<span class="literal">nullptr</span>, sum / <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">addTwoNumbers</span>(l1, l2, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p>遍历次数：<code>max(len(l1), len(l2)) + 1</code>，因此是线性时间\(\)</p><h3 id="空间复杂度">空间复杂度</h3><p>额外申请了和一个链表，因此空间复杂度也为 \(\)</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;滑动窗口&quot;&gt;滑动窗口&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://leetcode.com/problems/add-two-numbers/&quot;&gt;AddTwoNumbers&lt;/a&gt;
You are given two non-empty linked lists representing two non-negative
integers. The digits are stored in reverse order and each of their nodes
contain a single digit. Add the two numbers and return it as a linked
list.&lt;/p&gt;
&lt;p&gt;You may assume the two numbers do not contain any leading zero,
except the number 0 itself.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 7 -&amp;gt; 0 -&amp;gt; 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: 342 + 465 = 807.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Groking The Coding Interview" scheme="https://bapuqln.github.io/categories/Groking-The-Coding-Interview/"/>
    
    
    <category term="educative.io" scheme="https://bapuqln.github.io/tags/educative-io/"/>
    
  </entry>
  
  <entry>
    <title>RectangleStrip</title>
    <link href="https://bapuqln.github.io/2020/11/08/RectanglesStrip/"/>
    <id>https://bapuqln.github.io/2020/11/08/RectanglesStrip/</id>
    <published>2020-11-08T02:49:12.000Z</published>
    <updated>2025-01-15T07:01:21.142Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/cert/view/certJHBUBX-XQBV55HYNW9SZYBB/details/">RectangleStrip</a>There are N rectangles numbered from 0 to N-1. The K-th rectangle hassize A[K] × B[K].</p><p>We want to arrange as many rectangles as possible into a strip. Therectangles can be arranged into a strip if they all share a side of thesame length (which becomes the height of the strip). Note thatrectangles can be rotated.</p><p>Write a function:</p><p>int solution(vector &amp;A, vector &amp;B);</p><p>that, given two arrays A and B of N integers each, returns themaximum number of rectangles that can be arranged into a strip.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">1. Given A = [2, 3, 2, 3, 5] and B = [3, 4, 2, 4, 2], the <span class="keyword">function</span> should <span class="built_in">return</span> 3. Choosing the 0th, 2nd and 4th rectangles we can obtain the following strip of height 2 (note that the 0th rectangle was rotated):</span><br><span class="line"></span><br><span class="line">(3 × 2), (2 × 2), (5 × 2)</span><br><span class="line"></span><br><span class="line">We can also choose the 0th, 1st and 3rd rectangles to obtain a strip of height 3. Here we have rotated 1st and 3rd rectangles:</span><br><span class="line"></span><br><span class="line">(2 × 3), (4 × 3), (4 × 3)</span><br><span class="line"></span><br><span class="line">2. Given A = [2, 3, 1, 3] and B = [2, 3, 1, 3], the <span class="keyword">function</span> should <span class="built_in">return</span> 2. We can choose the 1st and 3rd rectangles:</span><br><span class="line"></span><br><span class="line">(3 × 3), (3 × 3)</span><br><span class="line"></span><br><span class="line">3. Given A = [2, 10, 4, 1, 4] and B = [4, 1, 2, 2, 5], the <span class="keyword">function</span> should <span class="built_in">return</span> 3. We can choose the 0th, 2nd and 4th rectangles to obtain a strip of height 4:</span><br><span class="line"></span><br><span class="line">(2 × 4), (2 × 4), (5 × 4)</span><br></pre></td></tr></table></figure><p>Write an efficient algorithm for the following assumptions:</p><p>N is an integer within the range [1..100,000]; arrays A and B bothconsist of N integers; each element of arrays A, B is an integer withinthe range [1..1,000,000,000].</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>题目给了两个数组，分别表示可能的长或者宽</li><li>求出可以最多组成多少个矩形, 要么是同样的长，要么是同样的宽，</li><li>矩形可以旋转</li></ul><h3 id="理解例子">理解例子</h3><ul><li>[2, 3, 2, 3, 5] * [3, 4, 2, 4, 2]</li><li>可以形成 [3*2], [2*2], [5*2] 三个矩形</li></ul><h3 id="思路">思路</h3><ul><li>这个问题其实没那么复杂，既然两个数组的元素要组成矩形，那就肯定得把两个数组元素组合起来考虑</li><li>组成的元组为 {2,3}, {3,4}, {2,2}, {3,4}, {2,5}</li><li>最终的结果为 {2,3}, { }, {2,2}, { }, {2,5}</li><li>将其他的例子也做同样的类比，可以发现，其中使用的为出现次数最多的数字，即上面为2，因此需要统计词频，</li><li>在元组中出现最高频的数字记录下来，即为结果</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> m = A.<span class="built_in">size</span>();</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; freqs;</span><br><span class="line">    <span class="type">int</span> maxFreq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> n: A)</span><br><span class="line">        freqs[n]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> n: B)</span><br><span class="line">        freqs[n]++;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(A[i], B[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = freqs.<span class="built_in">begin</span>(); it != freqs.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        maxFreq = <span class="built_in">max</span>(maxFreq, it-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pic = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = freqs.<span class="built_in">begin</span>(); it != freqs.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second == maxFreq) &#123;</span><br><span class="line">            pic = it-&gt;first;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; p = vec[i];</span><br><span class="line">        <span class="keyword">if</span> (p.first == pic || p.second == pic)</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><img src="/images/QQ20201021-0.png" alt="结果" /><figcaption aria-hidden="true">结果</figcaption></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/cert/view/certJHBUBX-XQBV55HYNW9SZYBB/details/&quot;&gt;RectangleStrip&lt;/a&gt;
There are N rectangles numbered from 0 to N-1. The K-th rectangle has
size A[K] × B[K].&lt;/p&gt;
&lt;p&gt;We want to arrange as many rectangles as possible into a strip. The
rectangles can be arranged into a strip if they all share a side of the
same length (which becomes the height of the strip). Note that
rectangles can be rotated.&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;int solution(vector &amp;amp;A, vector &amp;amp;B);&lt;/p&gt;
&lt;p&gt;that, given two arrays A and B of N integers each, returns the
maximum number of rectangles that can be arranged into a strip.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Examples:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. Given A = [2, 3, 2, 3, 5] and B = [3, 4, 2, 4, 2], the &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; should &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 3. Choosing the 0th, 2nd and 4th rectangles we can obtain the following strip of height 2 (note that the 0th rectangle was rotated):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(3 × 2), (2 × 2), (5 × 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;We can also choose the 0th, 1st and 3rd rectangles to obtain a strip of height 3. Here we have rotated 1st and 3rd rectangles:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2 × 3), (4 × 3), (4 × 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. Given A = [2, 3, 1, 3] and B = [2, 3, 1, 3], the &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; should &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 2. We can choose the 1st and 3rd rectangles:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(3 × 3), (3 × 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. Given A = [2, 10, 4, 1, 4] and B = [4, 1, 2, 2, 5], the &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; should &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 3. We can choose the 0th, 2nd and 4th rectangles to obtain a strip of height 4:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2 × 4), (2 × 4), (5 × 4)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;N is an integer within the range [1..100,000]; arrays A and B both
consist of N integers; each element of arrays A, B is an integer within
the range [1..1,000,000,000].&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Medium" scheme="https://bapuqln.github.io/tags/Medium/"/>
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>背包九讲</title>
    <link href="https://bapuqln.github.io/2020/11/08/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://bapuqln.github.io/2020/11/08/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-08T02:40:18.000Z</published>
    <updated>2025-01-15T07:01:21.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="背包九讲读书笔记">背包九讲读书笔记</h2><h3 id="背包问题">0-1 背包问题</h3><h5 id="基本题目套路">基本题目套路</h5><p>有 <code>N</code> 件物品和一个容量为 <code>V</code> 的背包，放入第<code>i</code> 件物品消耗的费用是 <code>Ci</code>， 得到的价值是<code>Wi</code>。求解将哪些物品装入背包，<code>可使总价值总和最大</code>。</p><h5 id="基本题目思路">基本题目思路</h5><ul><li>特点：每件物品只有一个，选择：<code>放</code> or<code>不放</code>。</li><li>子问题：<code>F[i, v]</code>： 前 <code>i</code> 件物品恰好放入容量<code>v</code> 的背包，可以获得的最大价值</li><li>状态转移：<code>F[i, v] = max&#123;F[i-1, v], F[i-1, v-Ci] + Wi&#125;</code></li><li>当前的价值，只和之前的价值有关，因此两个选择下的价值为：</li><li>如果 <code>i</code> 不选，价值：前 <code>i-1</code> 件，放入容量<code>v</code> 的背包（<code>F[i-1, v]</code>）</li><li>如果 <code>i</code> 选择，价值：前 <code>i-1</code>件，放入容量（<code>v-Ci</code>）的背包（确保 i 能放下去，得减去 i占用的容量）+ 放入 i 的价值 Wi</li></ul><h5 id="伪代码">伪代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="number">0</span>, <span class="number">0.</span>.V] &lt;- <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt;- <span class="number">1</span> to N</span><br><span class="line">    <span class="keyword">for</span> v &lt;- Ci to V</span><br><span class="line">        F[i, v] &lt;- <span class="built_in">max</span>&#123;F[i-<span class="number">1</span>, v], F[i-<span class="number">1</span>, v-Ci] + Wi&#125;</span><br></pre></td></tr></table></figure><h5 id="优化">优化</h5><p>时间复杂度：<code>O(VN)</code> 空间复杂度：滚动数组（逆序计算F[v]，才能保证正确的顺序）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="number">0.</span>.V] &lt;- <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt;- <span class="number">1</span> to N</span><br><span class="line">    <span class="keyword">for</span> v &lt;- V to Ci</span><br><span class="line">        F[v] &lt;- <span class="built_in">max</span>&#123;F[v], F[v-Ci] + Wi&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ZeroOnePack</span>(<span class="params">F,C,W</span>)</span><br><span class="line">    <span class="keyword">for</span> v &lt;- V to C</span><br><span class="line">        F[v] &lt;- <span class="built_in">max</span>(F[v], F[C-v] + W)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="number">0.</span>.V] &lt;- <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;- <span class="number">1</span> to N</span><br><span class="line">        ZeroOnePack(F,Ci,Wi)</span><br></pre></td></tr></table></figure><h3 id="完全背包问题">完全背包问题</h3><h4 id="题目基本套路">题目基本套路</h4><p>N 种物品和容量为 V的背包，<code>每种物品都有无限件可以用</code>，放入第 <code>i</code>件物品消耗的费用是 <code>Ci</code>， 得到的价值是 <code>Wi</code>。求解将哪些物品装入背包，<code>可使物品总消耗费用不超过背包容量</code>，且价值总和最大。</p><h4 id="基本套路">基本套路</h4><ul><li>每种物品无限件，因此每个物品的策略不是：选和不选。而是<code>选几件</code></li><li>状态转移：<code>F[i, v] = max&#123;F[i-1, v-kCi] + kWi | 0 ≤ kCi ≤ v&#125;</code></li></ul><h4 id="简单有效的优化">简单有效的优化</h4><ul><li>若两件物品<code>i</code>, <code>j</code> 满足 <code>Ci ≤ Cj</code>且 <code>Wi ≥ Wj</code>，则可以将 <code>j</code> 直接去掉，不用考虑(任何情况下，都可以将价值小费用高的 j 换成物美价廉的 i)</li><li>或者 将费用大于 V 的物品去掉</li></ul><h4 id="转换为-0-1-背包问题">转换为 0-1 背包问题</h4><ul><li>第 i 种物品最多选：V/Ci 种，把第 i 种物品转化为 V/Ci件费用及价值不变的物品。 （将一种物品转化为多件只能选 0 或者 1 件的 0-1背包问题）</li><li>二进制：第 i 种物品拆成费用为 Ci2^k，价值为 Wi2^k 的若干件物品。 k满足 Ci2^k ≤ V 的非负整数。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;背包九讲读书笔记&quot;&gt;背包九讲读书笔记&lt;/h2&gt;
&lt;h3 id=&quot;背</summary>
      
    
    
    
    <category term="背包问题" scheme="https://bapuqln.github.io/categories/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="Medium" scheme="https://bapuqln.github.io/tags/Medium/"/>
    
    <category term="背包问题" scheme="https://bapuqln.github.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>PassingCars</title>
    <link href="https://bapuqln.github.io/2020/10/07/PassingCars/"/>
    <id>https://bapuqln.github.io/2020/10/07/PassingCars/</id>
    <published>2020-10-07T04:27:37.000Z</published>
    <updated>2025-01-15T07:01:21.141Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/trainingB4JZ2Q-S4C/">PassingCars</a></p><p>A non-empty array A consisting of N integers is given. Theconsecutive elements of array A represent consecutive cars on aroad.</p><p>Array A contains only 0s and/or 1s:</p><p>0 represents a car traveling east, 1 represents a car traveling west.The goal is to count passing cars. We say that a pair of cars (P, Q),where 0 ≤ P &lt; Q &lt; N, is passing when P is traveling to the eastand Q is traveling to the west.</p><p>For example, consider array A such that:</p><p>A[0] = 0 A[1] = 1 A[2] = 0 A[3] = 1 A[4] = 1 We have five pairs ofpassing cars: (0, 1), (0, 3), (0, 4), (2, 3), (2, 4).</p><p>Write a function:</p><p>int solution(vector<int> &amp;A);</p><p>that, given a non-empty array A of N integers, returns the number ofpairs of passing cars.</p><p>The function should return −1 if the number of pairs of passing carsexceeds 1,000,000,000.</p><p>For example, given:</p><p>A[0] = 0 A[1] = 1 A[2] = 0 A[3] = 1 A[4] = 1 the function shouldreturn 5, as explained above.</p><p>Write an efficient algorithm for the following assumptions:</p><p>N is an integer within the range [1..100,000]; each element of arrayA is an integer that can have one of the following values: 0, 1.<span id="more"></span></p><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>给定一个数组表示汽车行进方向</li><li>要求计算能经过多少汽车，0 和 1 相遇才会加 1</li><li>前缀和，从端开始计算，碰到 0，就需要把经过的汽车都加上</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> m = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefixSum</span> <span class="params">(m, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> prefix = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        prefix += A[i];</span><br><span class="line">        prefixSum[i] = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            ans += prefixSum[m<span class="number">-1</span>] - prefixSum[i];</span><br><span class="line">            <span class="keyword">if</span> (ans &gt; <span class="number">1000000000</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/trainingB4JZ2Q-S4C/&quot;&gt;PassingCars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A non-empty array A consisting of N integers is given. The
consecutive elements of array A represent consecutive cars on a
road.&lt;/p&gt;
&lt;p&gt;Array A contains only 0s and/or 1s:&lt;/p&gt;
&lt;p&gt;0 represents a car traveling east, 1 represents a car traveling west.
The goal is to count passing cars. We say that a pair of cars (P, Q),
where 0 ≤ P &amp;lt; Q &amp;lt; N, is passing when P is traveling to the east
and Q is traveling to the west.&lt;/p&gt;
&lt;p&gt;For example, consider array A such that:&lt;/p&gt;
&lt;p&gt;A[0] = 0 A[1] = 1 A[2] = 0 A[3] = 1 A[4] = 1 We have five pairs of
passing cars: (0, 1), (0, 3), (0, 4), (2, 3), (2, 4).&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;int solution(vector&lt;int&gt; &amp;amp;A);&lt;/p&gt;
&lt;p&gt;that, given a non-empty array A of N integers, returns the number of
pairs of passing cars.&lt;/p&gt;
&lt;p&gt;The function should return −1 if the number of pairs of passing cars
exceeds 1,000,000,000.&lt;/p&gt;
&lt;p&gt;For example, given:&lt;/p&gt;
&lt;p&gt;A[0] = 0 A[1] = 1 A[2] = 0 A[3] = 1 A[4] = 1 the function should
return 5, as explained above.&lt;/p&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;N is an integer within the range [1..100,000]; each element of array
A is an integer that can have one of the following values: 0, 1.</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>CountDiv</title>
    <link href="https://bapuqln.github.io/2020/10/06/CountDiv/"/>
    <id>https://bapuqln.github.io/2020/10/06/CountDiv/</id>
    <published>2020-10-06T04:10:46.000Z</published>
    <updated>2025-01-15T07:01:21.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/training37GVR9-XSW/">CountDiv</a>Write a function:</p><p>int solution(int A, int B, int K);</p><p>that, given three integers A, B and K, returns the number of integerswithin the range [A..B] that are divisible by K, i.e.:</p><p>{ i : A ≤ i ≤ B, i mod K = 0 }</p><p>For example, for A = 6, B = 11 and K = 2, your function should return3, because there are three numbers divisible by 2 within the range[6..11], namely 6, 8 and 10.</p><p>Write an efficient algorithm for the following assumptions:</p><p>A and B are integers within the range [0..2,000,000,000]; K is aninteger within the range [1..2,000,000,000]; A ≤ B. <span id="more"></span></p><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>暴力解法超时，说明需要更加聪明的剪枝</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="keyword">while</span> (B % K &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        B--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (A % K &gt; <span class="number">0</span>)</span><br><span class="line">        A++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (B-A) / K + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(1)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/training37GVR9-XSW/&quot;&gt;CountDiv&lt;/a&gt;
Write a function:&lt;/p&gt;
&lt;p&gt;int solution(int A, int B, int K);&lt;/p&gt;
&lt;p&gt;that, given three integers A, B and K, returns the number of integers
within the range [A..B] that are divisible by K, i.e.:&lt;/p&gt;
&lt;p&gt;{ i : A ≤ i ≤ B, i mod K = 0 }&lt;/p&gt;
&lt;p&gt;For example, for A = 6, B = 11 and K = 2, your function should return
3, because there are three numbers divisible by 2 within the range
[6..11], namely 6, 8 and 10.&lt;/p&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;A and B are integers within the range [0..2,000,000,000]; K is an
integer within the range [1..2,000,000,000]; A ≤ B.</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>PermCheck</title>
    <link href="https://bapuqln.github.io/2020/10/06/PermCheck/"/>
    <id>https://bapuqln.github.io/2020/10/06/PermCheck/</id>
    <published>2020-10-06T03:19:30.000Z</published>
    <updated>2025-01-15T07:01:21.141Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/training4EJWRG-YUE/">PermCheck</a>A non-empty array A consisting of N integers is given.</p><p>A permutation is a sequence containing each element from 1 to N once,and only once.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">For example, array A such that:</span><br><span class="line"></span><br><span class="line">    A[0] = 4</span><br><span class="line">    A[1] = 1</span><br><span class="line">    A[2] = 3</span><br><span class="line">    A[3] = 2</span><br><span class="line">is a permutation, but array A such that:</span><br><span class="line"></span><br><span class="line">    A[0] = 4</span><br><span class="line">    A[1] = 1</span><br><span class="line">    A[2] = 3</span><br><span class="line">is not a permutation, because value 2 is missing.</span><br></pre></td></tr></table></figure><p>The goal is to check whether array A is a permutation.</p><p>Write a function:</p><p>int solution(vector<int> &amp;A);</p><p>that, given an array A, returns 1 if array A is a permutation and 0if it is not.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">For example, given array A such that:</span><br><span class="line"></span><br><span class="line">    A[0] = 4</span><br><span class="line">    A[1] = 1</span><br><span class="line">    A[2] = 3</span><br><span class="line">    A[3] = 2</span><br><span class="line">the <span class="keyword">function</span> should <span class="built_in">return</span> 1.</span><br><span class="line"></span><br><span class="line">Given array A such that:</span><br><span class="line"></span><br><span class="line">    A[0] = 4</span><br><span class="line">    A[1] = 1</span><br><span class="line">    A[2] = 3</span><br><span class="line">the <span class="keyword">function</span> should <span class="built_in">return</span> 0.</span><br></pre></td></tr></table></figure><p>Write an efficient algorithm for the following assumptions:</p><p>N is an integer within the range [1..100,000]; each element of arrayA is an integer within the range [1..1,000,000,000].</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>给定一个数组，让求数组元素是否为 排列</li><li>排列一定是所有数都包含了，那么如果缺某一个肯定就不对，重复也肯定是错误的,那么当所有元素都插入进去，最大元素一定是和总体个数一样。</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; map_;</span><br><span class="line">    <span class="type">int</span> maxValue = INT_MIN;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: A) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map_.<span class="built_in">count</span>(i))</span><br><span class="line">            map_[i]++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        maxValue = <span class="built_in">max</span>(i, maxValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxValue == map_.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/training4EJWRG-YUE/&quot;&gt;PermCheck&lt;/a&gt;
A non-empty array A consisting of N integers is given.&lt;/p&gt;
&lt;p&gt;A permutation is a sequence containing each element from 1 to N once,
and only once.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;For example, array A such that:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[0] = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[1] = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[2] = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[3] = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;is a permutation, but array A such that:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[0] = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[1] = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[2] = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;is not a permutation, because value 2 is missing.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The goal is to check whether array A is a permutation.&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;int solution(vector&lt;int&gt; &amp;amp;A);&lt;/p&gt;
&lt;p&gt;that, given an array A, returns 1 if array A is a permutation and 0
if it is not.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;For example, given array A such that:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[0] = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[1] = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[2] = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[3] = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;the &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; should &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Given array A such that:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[0] = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[1] = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[2] = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;the &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; should &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 0.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;N is an integer within the range [1..100,000]; each element of array
A is an integer within the range [1..1,000,000,000].&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>MissingInteger</title>
    <link href="https://bapuqln.github.io/2020/10/06/MissingInteger/"/>
    <id>https://bapuqln.github.io/2020/10/06/MissingInteger/</id>
    <published>2020-10-06T02:30:22.000Z</published>
    <updated>2025-01-15T07:01:21.141Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/trainingD8SCXY-ZS4/">MissingInteger</a>This is a demo task.</p><p>Write a function:</p><p>int solution(vector<int> &amp;A);</p><p>that, given an array A of N integers, returns the smallest positiveinteger (greater than 0) that does not occur in A.</p><p>For example, given A = [1, 3, 6, 4, 1, 2], the function should return5.</p><p>Given A = [1, 2, 3], the function should return 4.</p><p>Given A = [−1, −3], the function should return 1.</p><p>Write an efficient algorithm for the following assumptions:</p><p>N is an integer within the range [1..100,000]; each element of arrayA is an integer within the range [−1,000,000..1,000,000].</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>给个无序数组，大于 0</li><li>返回从 1 开始数，缺失的第一个数。</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; memo_;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt; <span class="number">0</span>) memo_[A[i]] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这块有个坑，如果边界为 memo_.size()，1, 3, 6, 4, 1, 2 会出错</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; memo_.<span class="built_in">size</span>() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (memo_.<span class="built_in">find</span>(i) == memo_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memo_.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/trainingD8SCXY-ZS4/&quot;&gt;MissingInteger&lt;/a&gt;
This is a demo task.&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;int solution(vector&lt;int&gt; &amp;amp;A);&lt;/p&gt;
&lt;p&gt;that, given an array A of N integers, returns the smallest positive
integer (greater than 0) that does not occur in A.&lt;/p&gt;
&lt;p&gt;For example, given A = [1, 3, 6, 4, 1, 2], the function should return
5.&lt;/p&gt;
&lt;p&gt;Given A = [1, 2, 3], the function should return 4.&lt;/p&gt;
&lt;p&gt;Given A = [−1, −3], the function should return 1.&lt;/p&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;N is an integer within the range [1..100,000]; each element of array
A is an integer within the range [−1,000,000..1,000,000].&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>MaxCounter</title>
    <link href="https://bapuqln.github.io/2020/10/06/MaxCounter/"/>
    <id>https://bapuqln.github.io/2020/10/06/MaxCounter/</id>
    <published>2020-10-06T01:02:36.000Z</published>
    <updated>2025-01-15T07:01:21.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/training7GBQ3S-T9U/">MaxCounters</a>You are given N counters, initially set to 0, and you have two possibleoperations on them:</p><p>increase(X) − counter X is increased by 1, max counter − all countersare set to the maximum value of any counter. A non-empty array A of Mintegers is given. This array represents consecutive operations:</p><p>if A[K] = X, such that 1 ≤ X ≤ N, then operation K is increase(X), ifA[K] = N + 1 then operation K is max counter. For example, given integerN = 5 and array A such that:</p><pre><code>A[0] = 3A[1] = 4A[2] = 4A[3] = 6A[4] = 1A[5] = 4A[6] = 4</code></pre><p>the values of the counters after each consecutive operation willbe:</p><pre><code>(0, 0, 1, 0, 0)(0, 0, 1, 1, 0)(0, 0, 1, 2, 0)(2, 2, 2, 2, 2)(3, 2, 2, 2, 2)(3, 2, 2, 3, 2)(3, 2, 2, 4, 2)</code></pre><p>The goal is to calculate the value of every counter after alloperations.</p><p>Write a function:</p><p>vector<int> solution(int N, vector<int> &amp;A);</p><p>that, given an integer N and a non-empty array A consisting of Mintegers, returns a sequence of integers representing the values of thecounters.</p><p>Result array should be returned as a vector of integers.</p><p>For example, given:</p><pre><code>A[0] = 3A[1] = 4A[2] = 4A[3] = 6A[4] = 1A[5] = 4A[6] = 4</code></pre><p>the function should return [3, 2, 2, 4, 2], as explained above.</p><p>Write an efficient algorithm for the following assumptions:</p><p>N and M are integers within the range [1..100,000]; each element ofarray A is an integer within the range [1..N + 1].</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>根据他给的规则，填充即可。</li><li>但他有个恶心的地方就是有个规则是将数组的全部内容设置为最大值。</li><li>如果嵌套循环 O(N^2) 肯定超时，那肯定是需要记下来最大的值。</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solution</span><span class="params">(<span class="type">int</span> N, vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(N, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> curMax = <span class="number">0</span>, baseValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> idx = A[i]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &gt;=<span class="number">1</span> &amp;&amp; A[i] &lt;= N)&#123;</span><br><span class="line">            ans[idx] = <span class="built_in">max</span>(baseValue, ans[idx]) + <span class="number">1</span>;</span><br><span class="line">            curMax = <span class="built_in">max</span>(curMax, ans[idx]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[i] == N<span class="number">+1</span>) &#123;</span><br><span class="line">            baseValue = curMax;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[i] &lt; baseValue) &#123;</span><br><span class="line">            ans[i] = baseValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/training7GBQ3S-T9U/&quot;&gt;MaxCounters&lt;/a&gt;
You are given N counters, initially set to 0, and you have two possible
operations on them:&lt;/p&gt;
&lt;p&gt;increase(X) − counter X is increased by 1, max counter − all counters
are set to the maximum value of any counter. A non-empty array A of M
integers is given. This array represents consecutive operations:&lt;/p&gt;
&lt;p&gt;if A[K] = X, such that 1 ≤ X ≤ N, then operation K is increase(X), if
A[K] = N + 1 then operation K is max counter. For example, given integer
N = 5 and array A such that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A[0] = 3
A[1] = 4
A[2] = 4
A[3] = 6
A[4] = 1
A[5] = 4
A[6] = 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the values of the counters after each consecutive operation will
be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(0, 0, 1, 0, 0)
(0, 0, 1, 1, 0)
(0, 0, 1, 2, 0)
(2, 2, 2, 2, 2)
(3, 2, 2, 2, 2)
(3, 2, 2, 3, 2)
(3, 2, 2, 4, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The goal is to calculate the value of every counter after all
operations.&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;vector&lt;int&gt; solution(int N, vector&lt;int&gt; &amp;amp;A);&lt;/p&gt;
&lt;p&gt;that, given an integer N and a non-empty array A consisting of M
integers, returns a sequence of integers representing the values of the
counters.&lt;/p&gt;
&lt;p&gt;Result array should be returned as a vector of integers.&lt;/p&gt;
&lt;p&gt;For example, given:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A[0] = 3
A[1] = 4
A[2] = 4
A[3] = 6
A[4] = 1
A[5] = 4
A[6] = 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the function should return [3, 2, 2, 4, 2], as explained above.&lt;/p&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;N and M are integers within the range [1..100,000]; each element of
array A is an integer within the range [1..N + 1].&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>Mac_NSTextView_中英混输情况下_inline_上下抖动</title>
    <link href="https://bapuqln.github.io/2020/10/05/Mac-NSTextView-%E4%B8%AD%E8%8B%B1%E6%B7%B7%E8%BE%93%E6%83%85%E5%86%B5%E4%B8%8B-inline-%E4%B8%8A%E4%B8%8B%E6%8A%96%E5%8A%A8/"/>
    <id>https://bapuqln.github.io/2020/10/05/Mac-NSTextView-%E4%B8%AD%E8%8B%B1%E6%B7%B7%E8%BE%93%E6%83%85%E5%86%B5%E4%B8%8B-inline-%E4%B8%8A%E4%B8%8B%E6%8A%96%E5%8A%A8/</id>
    <published>2020-10-05T02:57:04.000Z</published>
    <updated>2025-01-15T07:01:21.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="问题由来">问题由来</h1><p>今天在做项目的时候，发现自定义的 <code>NSTextView</code>出现了几种情况比较蛋疼</p><ul><li><p>对齐问题，英文对齐，中文偏移</p></li><li><p>在中英文混输的情况下，会出现之前的文字上下抖动的情况，可以拿出来钉钉试试</p></li></ul><blockquote><p>先在输入框中输入中文（<code>啊</code>），空格上屏后，再输入一个英文字符<code>a</code></p></blockquote><blockquote><p>不断地尝试删除 <code>a</code>，再输入 <code>a</code></p></blockquote><blockquote><p>你会看到 <code>啊</code>会随着你的输入和删除上下做轻微的抖动，感觉在拍抖音，给个背景音乐很应景</p></blockquote><h1 id="自己的项目">自己的项目</h1><p>出现了同样的问题，而且更严重的是，同样的输入框，在作为用户签名的时候，中文会有明显的偏移&gt; 英文对齐，中文上偏</p><h1 id="解决">解决</h1><p>尝试了很多办法，其实比较简单，让自定义的 <code>layoutManager</code>和 <code>textContainer</code> 去适配一下。 关键代码如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">textStorage.addLayoutManager(layoutManager)</span><br><span class="line">layoutManager.addTextContainer(textContainer)</span><br><span class="line">layoutManager.typesetterBehavior <span class="operator">=</span> .behavior_10_2_WithCompatibility</span><br></pre></td></tr></table></figure><p>前后比较一下，所有问题都消失了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;问题由来&quot;&gt;问题由来&lt;/h1&gt;
&lt;p&gt;今天在做项目的时候，发现自定</summary>
      
    
    
    
    <category term="Mac Develop" scheme="https://bapuqln.github.io/categories/Mac-Develop/"/>
    
    <category term="Swift" scheme="https://bapuqln.github.io/categories/Mac-Develop/Swift/"/>
    
    
    <category term="Mac Develop" scheme="https://bapuqln.github.io/tags/Mac-Develop/"/>
    
    <category term="Swift" scheme="https://bapuqln.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>FrogRiverOne</title>
    <link href="https://bapuqln.github.io/2020/10/05/FrogRiverOne/"/>
    <id>https://bapuqln.github.io/2020/10/05/FrogRiverOne/</id>
    <published>2020-10-04T17:22:57.000Z</published>
    <updated>2025-01-15T07:01:21.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/trainingUR22B7-7R8/">FrogRiverOne</a>A small frog wants to get to the other side of a river. The frog isinitially located on one bank of the river (position 0) and wants to getto the opposite bank (position X+1). Leaves fall from a tree onto thesurface of the river.</p><p>You are given an array A consisting of N integers representing thefalling leaves. A[K] represents the position where one leaf falls attime K, measured in seconds.</p><p>The goal is to find the earliest time when the frog can jump to theother side of the river. The frog can cross only when leaves appear atevery position across the river from 1 to X (that is, we want to findthe earliest moment when all the positions from 1 to X are covered byleaves). You may assume that the speed of the current in the river isnegligibly small, i.e. the leaves do not change their positions oncethey fall in the river.</p><p>For example, you are given integer X = 5 and array A such that:</p><p>A[0] = 1 A[1] = 3 A[2] = 1 A[3] = 4 A[4] = 2 A[5] = 3 A[6] = 5 A[7] =4 In second 6, a leaf falls into position 5. This is the earliest timewhen leaves appear in every position across the river.</p><p>Write a function:</p><p>int solution(int X, vector<int> &amp;A);</p><p>that, given a non-empty array A consisting of N integers and integerX, returns the earliest time when the frog can jump to the other side ofthe river.</p><p>If the frog is never able to jump to the other side of the river, thefunction should return −1.</p><p>For example, given X = 5 and array A such that:</p><p>A[0] = 1 A[1] = 3 A[2] = 1 A[3] = 4 A[4] = 2 A[5] = 3 A[6] = 5 A[7] =4 the function should return 6, as explained above.</p><p>Write an efficient algorithm for the following assumptions:</p><p>N and X are integers within the range [1..100,000]; each element ofarray A is an integer within the range [1..X].</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>说了一大段故事，就是要求在计算 1..X 都出现过的时候，X下标的位置</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> X, vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    set&lt;<span class="type">int</span>&gt; memo_;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        memo_.<span class="built_in">insert</span>(A[i]);</span><br><span class="line">        <span class="keyword">if</span> (memo_.<span class="built_in">size</span>() == X) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(NlogN)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/trainingUR22B7-7R8/&quot;&gt;FrogRiverOne&lt;/a&gt;
A small frog wants to get to the other side of a river. The frog is
initially located on one bank of the river (position 0) and wants to get
to the opposite bank (position X+1). Leaves fall from a tree onto the
surface of the river.&lt;/p&gt;
&lt;p&gt;You are given an array A consisting of N integers representing the
falling leaves. A[K] represents the position where one leaf falls at
time K, measured in seconds.&lt;/p&gt;
&lt;p&gt;The goal is to find the earliest time when the frog can jump to the
other side of the river. The frog can cross only when leaves appear at
every position across the river from 1 to X (that is, we want to find
the earliest moment when all the positions from 1 to X are covered by
leaves). You may assume that the speed of the current in the river is
negligibly small, i.e. the leaves do not change their positions once
they fall in the river.&lt;/p&gt;
&lt;p&gt;For example, you are given integer X = 5 and array A such that:&lt;/p&gt;
&lt;p&gt;A[0] = 1 A[1] = 3 A[2] = 1 A[3] = 4 A[4] = 2 A[5] = 3 A[6] = 5 A[7] =
4 In second 6, a leaf falls into position 5. This is the earliest time
when leaves appear in every position across the river.&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;int solution(int X, vector&lt;int&gt; &amp;amp;A);&lt;/p&gt;
&lt;p&gt;that, given a non-empty array A consisting of N integers and integer
X, returns the earliest time when the frog can jump to the other side of
the river.&lt;/p&gt;
&lt;p&gt;If the frog is never able to jump to the other side of the river, the
function should return −1.&lt;/p&gt;
&lt;p&gt;For example, given X = 5 and array A such that:&lt;/p&gt;
&lt;p&gt;A[0] = 1 A[1] = 3 A[2] = 1 A[3] = 4 A[4] = 2 A[5] = 3 A[6] = 5 A[7] =
4 the function should return 6, as explained above.&lt;/p&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;N and X are integers within the range [1..100,000]; each element of
array A is an integer within the range [1..X].&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>TapeEquilibrium</title>
    <link href="https://bapuqln.github.io/2020/10/04/TapeEquilibrium/"/>
    <id>https://bapuqln.github.io/2020/10/04/TapeEquilibrium/</id>
    <published>2020-10-04T05:43:38.000Z</published>
    <updated>2025-01-15T07:01:21.142Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/training73HB8G-ZEU/">TapeEquilibrium</a>A non-empty array A consisting of N integers is given. Array Arepresents numbers on a tape.</p><p>Any integer P, such that 0 &lt; P &lt; N, splits this tape into twonon-empty parts: A[0], A[1], ..., A[P − 1] and A[P], A[P + 1], ..., A[N− 1].</p><p>The difference between the two parts is the value of: |(A[0] + A[1] +... + A[P − 1]) − (A[P] + A[P + 1] + ... + A[N − 1])|</p><p>In other words, it is the absolute difference between the sum of thefirst part and the sum of the second part.</p><p>For example, consider array A such that:</p><p>A[0] = 3 A[1] = 1 A[2] = 2 A[3] = 4 A[4] = 3 We can split this tapein four places:</p><p>P = 1, difference = |3 − 10| = 7 P = 2, difference = |4 − 9| = 5 P =3, difference = |6 − 7| = 1 P = 4, difference = |10 − 3| = 7 Write afunction:</p><p>int solution(vector<int> &amp;A);</p><p>that, given a non-empty array A of N integers, returns the minimaldifference that can be achieved.</p><p>For example, given:</p><p>A[0] = 3 A[1] = 1 A[2] = 2 A[3] = 4 A[4] = 3 the function shouldreturn 1, as explained above.</p><p>Write an efficient algorithm for the following assumptions:</p><p>N is an integer within the range [2..100,000]; each element of arrayA is an integer within the range [−1,000..1,000].</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>又给了一堆介绍，发现求前缀和可以解决区间和的问题</li><li>边界条件解决好就可以</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        A[i] += A[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = A[i<span class="number">-1</span>];</span><br><span class="line">        <span class="type">int</span> r = A[A.<span class="built_in">size</span>() - <span class="number">1</span>] - A[i<span class="number">-1</span>];</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, <span class="built_in">abs</span>(r-l));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/training73HB8G-ZEU/&quot;&gt;TapeEquilibrium&lt;/a&gt;
A non-empty array A consisting of N integers is given. Array A
represents numbers on a tape.&lt;/p&gt;
&lt;p&gt;Any integer P, such that 0 &amp;lt; P &amp;lt; N, splits this tape into two
non-empty parts: A[0], A[1], ..., A[P − 1] and A[P], A[P + 1], ..., A[N
− 1].&lt;/p&gt;
&lt;p&gt;The difference between the two parts is the value of: |(A[0] + A[1] +
... + A[P − 1]) − (A[P] + A[P + 1] + ... + A[N − 1])|&lt;/p&gt;
&lt;p&gt;In other words, it is the absolute difference between the sum of the
first part and the sum of the second part.&lt;/p&gt;
&lt;p&gt;For example, consider array A such that:&lt;/p&gt;
&lt;p&gt;A[0] = 3 A[1] = 1 A[2] = 2 A[3] = 4 A[4] = 3 We can split this tape
in four places:&lt;/p&gt;
&lt;p&gt;P = 1, difference = |3 − 10| = 7 P = 2, difference = |4 − 9| = 5 P =
3, difference = |6 − 7| = 1 P = 4, difference = |10 − 3| = 7 Write a
function:&lt;/p&gt;
&lt;p&gt;int solution(vector&lt;int&gt; &amp;amp;A);&lt;/p&gt;
&lt;p&gt;that, given a non-empty array A of N integers, returns the minimal
difference that can be achieved.&lt;/p&gt;
&lt;p&gt;For example, given:&lt;/p&gt;
&lt;p&gt;A[0] = 3 A[1] = 1 A[2] = 2 A[3] = 4 A[4] = 3 the function should
return 1, as explained above.&lt;/p&gt;
&lt;p&gt;Write an efficient algorithm for the following assumptions:&lt;/p&gt;
&lt;p&gt;N is an integer within the range [2..100,000]; each element of array
A is an integer within the range [−1,000..1,000].&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>CyclicRotation</title>
    <link href="https://bapuqln.github.io/2020/10/04/CyclicRotation/"/>
    <id>https://bapuqln.github.io/2020/10/04/CyclicRotation/</id>
    <published>2020-10-04T04:30:21.000Z</published>
    <updated>2025-01-15T07:01:21.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="题目">题目</h2><p><ahref="https://app.codility.com/demo/results/training23G6XA-48V/">CyclicRotation</a>An array A consisting of N integers is given. Rotation of the arraymeans that each element is shifted right by one index, and the lastelement of the array is moved to the first place. For example, therotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7] (elements areshifted right by one index and 6 is moved to the first place).</p><p>The goal is to rotate array A K times; that is, each element of Awill be shifted to the right K times.</p><p>Write a function:</p><p>vector<int> solution(vector<int> &amp;A, int K);</p><p>that, given an array A consisting of N integers and an integer K,returns the array A rotated K times.</p><p>For example, given</p><pre><code>A = [3, 8, 9, 7, 6]K = 3</code></pre><p>the function should return [9, 7, 6, 3, 8]. Three rotations weremade:</p><pre><code>[3, 8, 9, 7, 6] -&gt; [6, 3, 8, 9, 7][6, 3, 8, 9, 7] -&gt; [7, 6, 3, 8, 9][7, 6, 3, 8, 9] -&gt; [9, 7, 6, 3, 8]</code></pre><p>For another example, given</p><pre><code>A = [0, 0, 0]K = 1</code></pre><p>the function should return [0, 0, 0]</p><p>Given</p><pre><code>A = [1, 2, 3, 4]K = 4</code></pre><p>the function should return [1, 2, 3, 4]</p><p>Assume that:</p><p>N and K are integers within the range [0..100]; each element of arrayA is an integer within the range [−1,000..1,000]. In your solution,focus on correctness. The performance of your solution will not be thefocus of the assessment.</p><span id="more"></span><h2 id="解题报告">解题报告</h2><h3 id="理解题意">理解题意</h3><ul><li>给了超长的一段故事，让求数组循环右移以后的结果，肯定要求模</li><li>边界判断一下就行</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="keyword">if</span> (K == <span class="number">0</span> || A.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> m = A.<span class="built_in">size</span>();</span><br><span class="line">    K = K % m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span> <span class="params">(m, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> idx = (i + K) % m;</span><br><span class="line">        ans[idx] = A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p><code>O(N)</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://app.codility.com/demo/results/training23G6XA-48V/&quot;&gt;CyclicRotation&lt;/a&gt;
An array A consisting of N integers is given. Rotation of the array
means that each element is shifted right by one index, and the last
element of the array is moved to the first place. For example, the
rotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7] (elements are
shifted right by one index and 6 is moved to the first place).&lt;/p&gt;
&lt;p&gt;The goal is to rotate array A K times; that is, each element of A
will be shifted to the right K times.&lt;/p&gt;
&lt;p&gt;Write a function:&lt;/p&gt;
&lt;p&gt;vector&lt;int&gt; solution(vector&lt;int&gt; &amp;amp;A, int K);&lt;/p&gt;
&lt;p&gt;that, given an array A consisting of N integers and an integer K,
returns the array A rotated K times.&lt;/p&gt;
&lt;p&gt;For example, given&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A = [3, 8, 9, 7, 6]
K = 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the function should return [9, 7, 6, 3, 8]. Three rotations were
made:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[3, 8, 9, 7, 6] -&amp;gt; [6, 3, 8, 9, 7]
[6, 3, 8, 9, 7] -&amp;gt; [7, 6, 3, 8, 9]
[7, 6, 3, 8, 9] -&amp;gt; [9, 7, 6, 3, 8]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For another example, given&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A = [0, 0, 0]
K = 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the function should return [0, 0, 0]&lt;/p&gt;
&lt;p&gt;Given&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A = [1, 2, 3, 4]
K = 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the function should return [1, 2, 3, 4]&lt;/p&gt;
&lt;p&gt;Assume that:&lt;/p&gt;
&lt;p&gt;N and K are integers within the range [0..100]; each element of array
A is an integer within the range [−1,000..1,000]. In your solution,
focus on correctness. The performance of your solution will not be the
focus of the assessment.&lt;/p&gt;</summary>
    
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/categories/Codility/"/>
    
    
    <category term="Codility" scheme="https://bapuqln.github.io/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>VSCode C++ 配置</title>
    <link href="https://bapuqln.github.io/2020/10/03/VSCode-C/"/>
    <id>https://bapuqln.github.io/2020/10/03/VSCode-C/</id>
    <published>2020-10-03T05:04:54.000Z</published>
    <updated>2025-01-15T07:01:21.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="配置">配置</h1><p>经常用 VSCode 来开发C++，但是调试和配置每次都很头疼，现记录一下配置，备忘</p><h2 id="tasks.json">tasks.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang++ build active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang++&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;-std=c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;-stdlib=libc++&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="comment">// &quot;$&#123;workspaceFolder&#125;/*.cpp&quot;,</span></span><br><span class="line">          <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$gcc&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="launch.json">launch.json</h2><p>build and debug <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C++ - Build and debug active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang++ build active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="c_cpp_cofiguration.json">c_cpp_cofiguration.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mac&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span> <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;macFrameworkPath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;/System/Library/Frameworks&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;/Library/Frameworks&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang-x64&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;配置&quot;&gt;配置&lt;/h1&gt;
&lt;p&gt;经常用 VSCode 来开发
C++</summary>
      
    
    
    
    <category term="VSCode" scheme="https://bapuqln.github.io/categories/VSCode/"/>
    
    
    <category term="VSCode" scheme="https://bapuqln.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>SweepLine</title>
    <link href="https://bapuqln.github.io/2020/09/22/SweepLine/"/>
    <id>https://bapuqln.github.io/2020/09/22/SweepLine/</id>
    <published>2020-09-21T16:00:00.000Z</published>
    <updated>2025-01-15T07:01:21.142Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="起因">起因</h2><p>今天做了一道题，<ahref="https://leetcode.com/problems/subarray-sum-equals-k/">LeetCode560. Subarray Sum EqualsK</a>，有点蒙蔽，看了答案发现比较简单，记录一下</p><p>给定一个整数数组和一个整数 <code>k</code>，你需要找到该数组中和为 <code>k</code> 的连续的子数组的个数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">示例 1 :</span><br><span class="line"></span><br><span class="line">输入:nums = [1,1,1], k = 2</span><br><span class="line">输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</span><br><span class="line">说明 :</span><br><span class="line"></span><br><span class="line">数组的长度为 [1, 20,000]。</span><br><span class="line">数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="题解">题解</h3><p>题目的意思比较明确，要求找到 <code>n</code>个连续的子数组，并且这些连续子数组的和为 <code>k</code></p><ul><li>子数组求和</li><li>子数组求和可以使用前缀和，那么如何知道它能够满足需求?前缀和可以知道具体区间的和，那么区间终点的值-k，就是这段区间的起点。</li><li>需要一个哈希表，来记录上次出现该值得地方，找到 <code>cur-k</code>就是找到了和位 <code>k</code> 的区间起点。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">subArraySum</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, pre = <span class="number">0</span>;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; memo_;</span><br><span class="line">    memo_[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;num : nums) &#123;</span><br><span class="line">      pre += num;</span><br><span class="line">      <span class="keyword">if</span> (memo_.<span class="built_in">find</span>(pre - k) != memo_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        ans += memo_[pre - k];</span><br><span class="line">      &#125;</span><br><span class="line">      memo_[pre]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;今天做了一道题，&lt;a
href=&quot;https://leetcode.com/problems/subarray-sum-equals-k/&quot;&gt;LeetCode
560. Subarray Sum Equals
K&lt;/a&gt;，有点蒙蔽，看了答案发现比较简单，记录一下&lt;/p&gt;
&lt;p&gt;给定一个整数数组和一个整数 &lt;code&gt;k&lt;/code&gt;，你需要找到该数组中和为 &lt;code&gt;k&lt;/code&gt; 的连续的子数组的个数。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;示例 1 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入:nums = [1,1,1], k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;数组的长度为 [1, 20,000]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://bapuqln.github.io/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://bapuqln.github.io/tags/LeetCode/"/>
    
    <category term="Medium" scheme="https://bapuqln.github.io/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>位操作</title>
    <link href="https://bapuqln.github.io/2020/08/11/BitManupulate/"/>
    <id>https://bapuqln.github.io/2020/08/11/BitManupulate/</id>
    <published>2020-08-11T06:36:46.000Z</published>
    <updated>2025-01-15T07:01:21.138Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span id="more"></span></p><h1 id="位操作总结">位操作总结</h1><p>基本上位操作就那么几个:</p><h2 id="异或的特性">异或的特性</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x ^ <span class="number">0</span> = x</span><br><span class="line"></span><br><span class="line">x ^ <span class="number">11111</span>……<span class="number">1111</span> = ~x</span><br><span class="line"></span><br><span class="line">x ^ (~x) = <span class="number">11111</span>……<span class="number">1111</span></span><br><span class="line"></span><br><span class="line">x ^ x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">a ^ b = c =&gt; a ^ c = b =&gt; b ^ c = <span class="built_in">a</span> (交换律) a ^ b ^ c = a ^ (b ^ c) = (a ^ b）^ <span class="built_in">c</span> (结合律)</span><br></pre></td></tr></table></figure><h2 id="构造特殊的mask">构造特殊的Mask</h2><ul><li>将 <code>x</code> 最右边的 <code>n</code> 位清零，<code>x &amp; ( ~0 &lt;&lt; n )</code></li><li>获取 <code>x</code> 的第 <code>n</code> 位值(0 或者1)，<code>(x &gt;&gt; n) &amp; 1</code></li><li>获取 <code>x</code> 的第 <code>n</code>位的幂值，<code>x &amp; (1 &lt;&lt; (n - 1))</code></li><li>仅将第 <code>n</code> 位置为<code>1</code>，<code>x | (1 &lt;&lt; n)</code></li><li>仅将第 <code>n</code> 位置为<code>0</code>，<code>x &amp; (~(1 &lt;&lt; n))</code></li><li>将 <code>x</code> 最⾼位⾄第 <code>n</code>位(含)清零，<code>x &amp; ((1 &lt;&lt; n) - 1)</code></li><li>将第 <code>n</code> 位⾄第 <code>0</code>位(含)清零，<code>x &amp; (~((1 &lt;&lt; (n + 1)) - 1)</code></li></ul><h2 id="section"></h2><p><code>X &amp; 1 == 1</code> 判断是否是奇数(偶数)<code>X &amp; = (X - 1)</code> 将最低位(LSB)的 1 清零<code>X &amp; -X</code> 得到最低位(LSB)的 1</p><p><code>X &amp; ~X = 0</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://bapuqln.github.io/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://bapuqln.github.io/tags/LeetCode/"/>
    
    <category term="Bit Manupulate" scheme="https://bapuqln.github.io/tags/Bit-Manupulate/"/>
    
  </entry>
  
  <entry>
    <title>Range Sum Query</title>
    <link href="https://bapuqln.github.io/2020/07/11/RangeSumQuery/"/>
    <id>https://bapuqln.github.io/2020/07/11/RangeSumQuery/</id>
    <published>2020-07-11T13:41:49.000Z</published>
    <updated>2025-01-15T07:01:21.142Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="range-sum-query-immutable">Range Sum Query Immutable</h2><p>Given an integer array nums, find the sum of the elements betweenindices i and j (i ≤ j), inclusive.</p><p>Example: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [-2, 0, 3, -5, 2, -1]</span><br><span class="line"></span><br><span class="line">sumRange(0, 2) -&gt; 1</span><br><span class="line">sumRange(2, 5) -&gt; -1</span><br><span class="line">sumRange(0, 5) -&gt; -3</span><br><span class="line">Note:</span><br><span class="line">You may assume that the array does not change.</span><br><span class="line">There are many calls to sumRange <span class="keyword">function</span>.</span><br></pre></td></tr></table></figure> <span id="more"></span></p><h3 id="思路">思路</h3><ul><li>比较简单的 Range SumQuery，只要知道前缀和就可以计算出不变数组的任意区间的和。</li></ul><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        v_.<span class="built_in">push_back</span>(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num:nums) &#123;</span><br><span class="line">            v_.<span class="built_in">push_back</span>(v_.<span class="built_in">back</span>() + num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// O(n)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v_[j<span class="number">+1</span>] - v_[i]; <span class="comment">// O(1)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="range-sum-query-2d---immutable">Range Sum Query 2D -Immutable</h2><p>Given a 2D matrix matrix, find the sum of the elements inside therectangle defined by its upper left corner (row1, col1) and lower rightcorner (row2, col2).</p><p>Range Sum Query 2D The above rectangle (with the red border) isdefined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), whichcontains sum = 8.</p><p>Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Given matrix = [</span><br><span class="line">  [<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">sumRegion</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>) -&gt; <span class="number">8</span></span><br><span class="line"><span class="built_in">sumRegion</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>) -&gt; <span class="number">11</span></span><br><span class="line"><span class="built_in">sumRegion</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>) -&gt; <span class="number">12</span></span><br></pre></td></tr></table></figure><p>Note: You may assume that the matrix does not change. There are manycalls to sumRegion function. You may assume that row1 ≤ row2 and col1 ≤col2.</p><h3 id="思路-1">思路</h3><ul><li>参考之前Range Sum Query的思想，肯定是要提前计算出需要的数据，最后计算和相当于查表。</li><li>那么 2D 数组如何计算使用类似的思想呢</li><li>矩形区域的和相当于多个矩形区域进行叠加后减去重复计算的区域，如下图所示，小矩形区域可以看做三个以左上角（0，0）为顶点的矩形区域与大的矩形区域的操作后的结果<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="number">2</span>D array sum[row<span class="number">+1</span>][col<span class="number">+1</span>]</span><br><span class="line">sums[i<span class="number">+1</span>][j<span class="number">+1</span>] represents the sum of area from matrix[<span class="number">0</span>][<span class="number">0</span>] to matrix[i][j]</span><br><span class="line">(notice: we add additional blank row sums[<span class="number">0</span>][col<span class="number">+1</span>]=&#123;<span class="number">0</span>&#125; <span class="keyword">and</span> blank column sums[row<span class="number">+1</span>][<span class="number">0</span>]=&#123;<span class="number">0</span>&#125; to remove the edge <span class="keyword">case</span> checking), so, we can have the following definition</span><br><span class="line">+-----+-+-------+     +--------+-----+     +-----+---------+     +-----+--------+</span><br><span class="line">|     | |       |     |        |     |     |     |         |     |     |        |</span><br><span class="line">|     | |       |     |        |     |     |     |         |     |     |        |</span><br><span class="line">+-----+-+       |     +--------+     |     |     |         |     +-----+        |</span><br><span class="line">|     | |       |  =  |              |  +  |     |         |  -  |              |</span><br><span class="line">+-----+-+       |     |              |     +-----+         |     |              |</span><br><span class="line">|               |     |              |     |               |     |              |</span><br><span class="line">|               |     |              |     |               |     |              |</span><br><span class="line">+---------------+     +--------------+     +---------------+     +--------------+</span><br><span class="line"></span><br><span class="line">   sums[i][j]      =    sums[i<span class="number">-1</span>][j]    +     sums[i][j<span class="number">-1</span>]    -   sums[i<span class="number">-1</span>][j<span class="number">-1</span>]   +</span><br><span class="line"></span><br><span class="line">                        matrix[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></li><li>因此使用同样的思路计算区域如下</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+   +--------------+   +---------------+   +--------------+   +--------------+</span><br><span class="line">|               |   |         |    |   |   |           |   |         |    |   |   |          |</span><br><span class="line">|   (r1,c1)     |   |         |    |   |   |           |   |         |    |   |   |          |</span><br><span class="line">|   +------+    |   |         |    |   |   |           |   +---------+    |   +---+          |</span><br><span class="line">|   |      |    | = |         |    | - |   |           | - |      (r1,c2) | + |   (r1,c1)    |</span><br><span class="line">|   |      |    |   |         |    |   |   |           |   |              |   |              |</span><br><span class="line">|   +------+    |   +---------+    |   +---+           |   |              |   |              |</span><br><span class="line">|        (r2,c2)|   |       (r2,c2)|   |   (r2,c1)     |   |              |   |              |</span><br><span class="line">+---------------+   +--------------+   +---------------+   +--------------+   +--------------+</span><br></pre></td></tr></table></figure><h3 id="代码-1">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; sum;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = m &gt; <span class="number">0</span> ? matrix[<span class="number">0</span>].<span class="built_in">size</span>() : <span class="number">0</span>;</span><br><span class="line">        sum = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(m<span class="number">+1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n<span class="number">+1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                sum[i][j] = sum[i<span class="number">-1</span>][j<span class="number">-1</span>] + sum[i][j<span class="number">-1</span>] - sum[i<span class="number">-1</span>][j<span class="number">-1</span>] + matrix[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sums[row2<span class="number">+1</span>][col2<span class="number">+1</span>] - sums[row2<span class="number">+1</span>][col1] - sums[row1][col2<span class="number">+1</span>] + sums[row1][col1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="range-sum-query-mutable">Range Sum Query Mutable</h2><p>Given an integer array nums, find the sum of the elements betweenindices i and j (i ≤ j), inclusive.</p><p>The update(i, val) function modifies nums by updating the element atindex i to val.</p><p>Example: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [1, 3, 5]</span><br><span class="line">-</span><br><span class="line">sumRange(0, 2) -&gt; 9</span><br><span class="line">update(1, 2)</span><br><span class="line">sumRange(0, 2) -&gt; 8</span><br></pre></td></tr></table></figure> Note:</p><p>The array is only modifiable by the update function. You may assumethe number of calls to update and sumRange function is distributedevenly.</p><h3 id="fenwick-tree-binary-index-tree">Fenwick Tree (Binary IndexTree)</h3><p>树状数组，我们需要两个数组来存储，原始数组和 bit 数组 * 假定 i为左子节点，那么其父节点的坐标为 (i + lowbit(i)) * 假定 i为右子节点，那么其父节点的坐标为 (i - lowbit(i)) * update(int i, intdelta) --&gt; 更新前缀和数组中每一个受影响前缀和，从 i 到 最后一个位置 O(n) * query(int) --&gt; 直接返回 idx + 1 的前缀和 O(1) * 求 i 到 j的前缀和 就可用 query(j+1) - query(i) 来计算 *求和的基本思想，给定要求和的位置 i，可以用二级制表示法来分段求和，以 13为例 13 = 2^3 + 2 ^2 + 2 ^ 0; * 因此 prefixSum(13) = Range(1, 8) +Range(9, 12) + Range(13) // Range(i, j) 表示 i 到 j 的数字求和 * arr =[1, 7, 3, 0, 5, 8, 3, 2, 6, 2, 1, 1, 4, 5] prefixSum(13) = RANGE(1, 8) +RANGE(9, 12) + RANGE(13, 13) = 29 + 10 + 4 = 43</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FenwickTree</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; sum_;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FenwickTree</span>(<span class="type">int</span> n) : <span class="built_in">sum</span>(n<span class="number">+1</span>, <span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="comment">// 更新一个值，坐标 为 i，需要修改 bit 数组中涵盖了 原始数组 arr[i] 的值 --&gt;  下标 i 以及所有的父节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; sum.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            sum_[i] += delta;</span><br><span class="line">            i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 区间求和，假定求 i --&gt; j 的数值之和，可以求 0 --&gt; i-1 , 0 --&gt; j，再相减</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += sum_[i];</span><br><span class="line">            i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 区间求和 和 更新数组 都是 O(logn)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums_;</span><br><span class="line">    FenwickTree tree_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt; nums): <span class="built_in">nums_</span>(<span class="built_in">move</span>(nums)), <span class="built_in">tree_</span>(nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums_.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            tree_.<span class="built_in">update</span>(i<span class="number">+1</span>, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        tree_.<span class="built_in">update</span>(i, val - nums[i]);</span><br><span class="line">        nums_[i] -= val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumQuery</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tree_.<span class="built_in">query</span>(j<span class="number">+1</span>) - tree_.<span class="built_in">query</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="segment-tree">Segment Tree</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SegmentNode</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    SegmentNode *left;</span><br><span class="line">    SegmentNode *right;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SegmentNode</span>(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> sum, SegmentNode *left = <span class="literal">nullptr</span>, SegmentNode *right = <span class="literal">nullptr</span>):</span><br><span class="line">     <span class="built_in">start</span>(start), <span class="built_in">end</span>(end), <span class="built_in">sum</span>(sum), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right);</span><br><span class="line">    <span class="built_in">SegmentNode</span>(<span class="type">const</span> SegmentNode&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    SegmentNode&amp; <span class="keyword">operator</span>=(<span class="type">const</span> SegmentNode&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">SegmentNode</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span> left;</span><br><span class="line">        <span class="keyword">delete</span> right;</span><br><span class="line">        left = right = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;range-sum-query-immutable&quot;&gt;Range Sum Query Immutable&lt;/h2&gt;
&lt;p&gt;Given an integer array nums, find the sum of the elements between
indices i and j (i ≤ j), inclusive.&lt;/p&gt;
&lt;p&gt;Example: &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Given nums = [-2, 0, 3, -5, 2, -1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumRange(0, 2) -&amp;gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumRange(2, 5) -&amp;gt; -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumRange(0, 5) -&amp;gt; -3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You may assume that the array does not change.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;There are many calls to sumRange &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://bapuqln.github.io/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://bapuqln.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>
